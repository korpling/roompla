openapi: "3.0.2"
info:
  title: roompla
  version: "0"
  description: >
    Plan room occupancies and attendence
servers:
  - description: Your local developer service
    url: http://localhost:5050/v0

security:
  - bearerAuth: []

paths:
  /login:
    post:
      summary: Create JWT token for credentials of an account.
      tags:
        - roompla
      requestBody:
        description: Object with the user ID and password to login with
        required: true
        content:
          application/json:
            schema:
               $ref: "#/components/schemas/Credentials"

      responses:
        "200":
          description: Returns a JSON Web Token (JWT), valid until its expiration time is reached.
          content:
            text/plain:
              schema:
                type: string
                description: JSON Web Token (JWT)
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiZXhwIjoiMTU5MjE0NzE5NiIsImNvcnB1c19ncm91cHMiOlsiYWNhZGVtaWMiLCJpbnRlcm5hbCJdLCJhZG1pbiI6ZmFsc2V9._eVf-gPknBlqobOOB83p2bFjf0ws9-mkqb1UkM4rMRg"

        "401":
          description: Unauthorized
  /rooms:
    get:
      summary: Get all rooms in the system
      tags:
        - roompla
      responses:
        default:
          description: A list of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Room"

  /rooms/{room}/occupancies:
    put:
      summary: Add a new occupancy entry
      tags:
        - roompla
      parameters:
        - name: room
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeRange"
      responses:
        200:
          description: The new entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Occupancy"
        409:
          description: The room is already full.
        404:
          description: The room was not found
    get:
      summary: Get all (possibly filtered) occupancies for the given room.
      tags:
        - roompla
      parameters:
        - name: room
          required: true
          in: path
          schema:
            type: string
        - name: start
          in: query
          schema:
            type: string
          description: RFC 3339 formatted start time
        - name: end
          in: query
          schema:
            type: string
          description: RFC 3339 formatted end time
      responses:
        default:
          description: All matching occupancy entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Occupancy"

  /rooms/{room}/occupancies/{id}:
    put:
      summary: Update an existing occupancy entry
      tags:
        - roompla
      parameters:
        - name: room
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: Update was successful
        409:
          description: The room would be too full if the update would be executed.
        404:
          description: The room was not found
    delete:
      summary: Delete an existing occupancy entry
      tags:
        - roompla
      parameters:
        - name: room
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: Deletion was successful
        404:
          description: The room was not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Occupancy:
      type: object
      properties:
        id:
          type: integer
        start:
          type: string
          description: RFC 3339 formatted start time and truncated to hourly precision
          example: 2020-07-08T13:00:00+02:00
        end:
          type: string
          description: RFC 3339 formatted end time and truncated to hourly precision
          example: 2020-07-08T17:00:00+02:00
        room:
          type: string
          description: The ID of the room that is occupied
        user_id:
          type: string
          description: The ID of the user that occupies this room
        user_name:
          type: string
        user_contact:
          type: string

    TimeRange:
      type: object
      properties:
        start:
          type: string
          description: RFC 3339 formatted start time and truncated to hourly precision
        end:
          type: string
          description: RFC 3339 formatted end time and truncated to hourly precision

    Room:
      type: object
      properties:
        id:
          type: string
          description: ID/Name of the room
          example: 3.333
        max_occupancy:
          type: integer
          description: Maximum number of occupants at the same time
          example: 2
        timezone:
          type: string
          description: The timezone of the room
    
    Credentials:
      type: object
      required:
        - user_id
        - password
      properties:
        user_id:
          type: string
        password:
          type: string